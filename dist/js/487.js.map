{"version":3,"file":"js/487.js","mappings":"guEAWA,MAAMA,GAAQC,EAAAA,EAAAA,MACRC,GAAOC,EAAAA,EAAAA,IAAI,CACfC,QAAS,GACTC,gBAAiB,KAGbC,GAAqBH,EAAAA,EAAAA,KAAI,GAE/B,IAAII,GAAgBC,EAAAA,EAAAA,IAAS,CAC3BC,IAAKA,IAAKT,EAAMU,MAAMC,KAAKJ,cAC3BK,IAAMC,GAASb,EAAMc,OAAO,oCAAqCD,KAG/DE,GAAYP,EAAAA,EAAAA,IAAS,CACvBC,IAAKA,IAAKT,EAAMU,MAAMC,KAAKK,gCAC3BJ,IAAMK,GAAUjB,EAAMc,OAAO,8CAA+CG,KAG1EC,IAAoBV,EAAAA,EAAAA,IAAS,CAC/BC,IAAKA,IAAKT,EAAMU,MAAMC,KAAKQ,+BAC3BP,IAAMK,GAAUjB,EAAMc,OAAO,6CAA8CG,KAGzEG,IAAuBZ,EAAAA,EAAAA,IAAS,CAClCC,IAAKA,IAAKT,EAAMU,MAAMC,KAAKS,qBAC3BR,IAAMC,GAASb,EAAMc,OAAO,iCAAkCD,KAG5DQ,IAAWb,EAAAA,EAAAA,IAAS,CACtBC,IAAKA,IAAKT,EAAMU,MAAMC,KAAKU,SAC3BT,IAAMC,GAASb,EAAMc,OAAO,oCAAqCD,MAGnES,EAAAA,EAAAA,KAAU,KACRC,IAA4B,IAG9B,MAAMA,GAA6BA,KACjCvB,EAAMc,OAAO,+CAA+C,GAC5DU,EAAAA,EAAIf,IAAIgB,EAAAA,GAAUC,4BAA4BC,MAAKC,IACjD5B,EAAMc,OAAO,oCAAqCc,EAASf,KAAKA,MAChEb,EAAMc,OAAO,+CAA+C,EAAM,IACjEe,OAAMC,IACP9B,EAAMc,OAAO,+CAA+C,EAAM,GAClE,EAGEiB,GAAYC,IAChBhC,EAAMc,OAAO,8CAA8C,GAC3DU,EAAAA,EAAIS,KAAKR,EAAAA,GAAUS,0BAA2B,CAC5C7B,gBAAiB2B,EAAa3B,kBAC7BsB,MAAKC,IACN5B,EAAMc,OAAO,iCAAkCkB,GAC/ChC,EAAMc,OAAO,mCAAoCc,EAASf,KAAKA,MAC/Db,EAAMc,OAAO,8CAA8C,EAAM,IAChEe,OAAMC,IACP9B,EAAMc,OAAO,8CAA8C,EAAM,GACjE,EAGEqB,GAAcA,KAClB7B,EAAmBW,OAAQ,EAC3Bf,EAAKe,MAAMZ,gBAAkBL,EAAMU,MAAMC,KAAKS,qBAAqBf,gBAEnE,IAAI+B,EAAU,IAAIC,SAClBD,EAAQE,OAAO,UAAWpC,EAAKe,MAAMb,SACrCgC,EAAQE,OAAO,kBAAmBpC,EAAKe,MAAMZ,iBAC7CmB,EAAAA,EAAIS,KAAKR,EAAAA,GAAUc,yBAA0BH,GAAST,MAAKC,IAEzDY,EAAEC,MAAMC,OAAO,CAACtC,QAASwB,EAASf,OAClCP,EAAmBW,OAAQ,CAAK,IAC/BY,OAAMC,IACPxB,EAAmBW,OAAQ,CAAK,GAChC,E,spFC9EJ,MAAM0B,IAA2B,QAAgB,GAAQ,CAAC,CAAC,YAAY,qBAEvE,S","sources":["webpack://myzola-admin/./src/views/customer_care/ChatWithCustomers.vue","webpack://myzola-admin/./src/views/customer_care/ChatWithCustomers.vue?0b56"],"sourcesContent":["<script setup>\n\nimport {computed, onMounted, ref} from \"vue\";\nimport api from \"@/services/api\";\nimport {apiRoutes} from \"@/services/apiRoutes\";\nimport {useStore} from \"vuex\";\nimport {\n  trimParagraph,\n  formatChatTimestamp\n} from \"@/services/Helpers\";\n\nconst store = useStore();\nconst form = ref({\n  message: \"\",\n  conversation_id: \"\"\n})\n\nconst loadSendingMessage = ref(false)\n\nlet conversations = computed({\n  get: ()=> store.state.chat.conversations,\n  set: (data) => store.commit('chat/STORE_CUSTOMER_CONVERSATIONS', data)\n});\n\nlet isLoading = computed({\n  get: ()=> store.state.chat.isFetchingCustomerConversations,\n  set: (value) => store.commit('chat/SET_IS_FETCHING_CUSTOMER_CONVERSATIONS', value)\n});\n\nlet isLoadingMessages = computed({\n  get: ()=> store.state.chat.isFetchingConversationMessages,\n  set: (value) => store.commit('chat/SET_IS_FETCHING_CONVERSATION_MESSAGES', value)\n});\n\nlet selectedConversation = computed({\n  get: ()=> store.state.chat.selectedConversation,\n  set: (data) => store.commit('chat/SET_SELECTED_CONVERSATION', data)\n});\n\nlet messages = computed({\n  get: ()=> store.state.chat.messages,\n  set: (data) => store.commit('chat/STORE_CUSTOMER_CONVERSATIONS', data)\n});\n\nonMounted(()=>{\n  fetchCustomerConversations()\n})\n\nconst fetchCustomerConversations = () => {\n  store.commit(\"chat/SET_IS_FETCHING_CUSTOMER_CONVERSATIONS\", true);\n  api.get(apiRoutes.GET_CUSTOMER_CONVERSATIONS).then(response => {\n    store.commit(\"chat/STORE_CUSTOMER_CONVERSATIONS\", response.data.data);\n    store.commit(\"chat/SET_IS_FETCHING_CUSTOMER_CONVERSATIONS\", false);\n  }).catch(error => {\n    store.commit(\"chat/SET_IS_FETCHING_CUSTOMER_CONVERSATIONS\", false)\n  });\n}\n\nconst openChat = (conversation) => {\n  store.commit(\"chat/SET_IS_FETCHING_CONVERSATION_MESSAGES\", true);\n  api.post(apiRoutes.GET_CONVERSATION_MESSAGES, {\n    conversation_id: conversation.conversation_id\n  }).then(response => {\n    store.commit(\"chat/SET_SELECTED_CONVERSATION\", conversation);\n    store.commit(\"chat/STORE_CONVERSATION_MESSAGES\", response.data.data);\n    store.commit(\"chat/SET_IS_FETCHING_CONVERSATION_MESSAGES\", false);\n  }).catch(error => {\n    store.commit(\"chat/SET_IS_FETCHING_CONVERSATION_MESSAGES\", false)\n  });\n}\n\nconst sendMessage = () => {\n  loadSendingMessage.value = true\n  form.value.conversation_id = store.state.chat.selectedConversation.conversation_id\n\n  let payload = new FormData();\n  payload.append('message', form.value.message);\n  payload.append('conversation_id', form.value.conversation_id);\n  api.post(apiRoutes.SEND_MESSAGE_TO_CUSTOMER, payload).then(response => {\n    //show success response\n    $.growl.notice({message: response.data});\n    loadSendingMessage.value = false\n  }).catch(error => {\n    loadSendingMessage.value = false\n  });\n}\n</script>\n\n<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col-md-12 mb-4\">\n        <h4 class=\"font-weight-bold\">Customer Chats</h4>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n          <div class=\"card p-4\">\n            <div v-if=\"isLoading\">\n                <div class=\"d-flex flex-column justify-content-center align-items-center\">\n                  <div class=\"spinner-border text-primary\"></div>\n                  <p class=\"mt-2\">Loading conversations. Please wait...</p>\n                </div>\n            </div>\n\n            <div v-else>\n              <a href=\"#\" @click=\"openChat(conversation)\" :class=\"['d-flex p-3 chat-box', {'border-bottom': conversations.length > 1}]\" v-for=\"(conversation, index) in conversations\" :key=\"`conversation-${conversation.id}`\">\n                <div class=\"me-3\">\n                  <img :src=\"conversation.conversation.data.customer_photo\" class=\"rounded-circle\" style=\"width: 60px;\" :alt=\"conversation.conversation.data.customer_name\" />\n                </div>\n                <div>\n                  <p class=\"fw-bold text-dark mb-0\">{{ conversation.conversation.data.customer_name }}</p>\n                  <p class=\"mb-0 text-dark text-md mb-2\">{{ conversation.conversation.last_message ? trimParagraph(conversation.conversation.last_message.body) : \"Start Message\" }}</p>\n                  <small class=\"text-muted\">{{ conversation.conversation.last_message ? formatChatTimestamp(conversation.conversation.last_message.updated_at) : \"\" }}</small>\n                </div>\n              </a>\n            </div>\n          </div>\n      </div>\n\n      <div class=\"col-md-9\">\n          <div v-if=\"isLoadingMessages\">\n            <div class=\"d-flex flex-column justify-content-center align-items-center\">\n              <div class=\"spinner-border text-primary\"></div>\n              <p class=\"mt-2\">Loading messages. Please wait...</p>\n            </div>\n          </div>\n\n        <div v-else>\n          <div class=\"card\">\n            <div v-if=\"selectedConversation\">\n              <div class=\"d-flex p-4\">\n                <div class=\"me-3\">\n                  <img :src=\"selectedConversation.conversation.data.customer_photo\" class=\"rounded-circle\" style=\"width: 60px;\" :alt=\"selectedConversation.conversation.data.customer_name\" />\n                </div>\n                <div>\n                  <p class=\"fw-bold text-dark mb-0\">{{ selectedConversation.conversation.data.customer_name }}</p>\n                  <p class=\"mb-0 text-dark\">{{ selectedConversation.conversation.data.customer_email }}</p>\n                </div>\n              </div>\n\n              <hr class=\"my-0\"/>\n\n              <div>\n                <div v-if=\"messages.length > 0\">\n                  <div class=\"py-4 px-3\" v-for=\"message in messages\" :key=\"`chat-${selectedConversation.id}-message-${message.id}`\">\n                    <div class=\"d-flex justify-content-start mb-4\" v-if=\"!message.is_sender\">\n                      <div class=\"message-container\">\n                        {{ message.body }}\n                        <span class=\"message-time\">{{ formatChatTimestamp(message.created_at) }}</span>\n                      </div>\n                    </div>\n\n                    <div class=\"d-flex justify-content-end mb-4\" v-else-if=\"message.is_sender\">\n                      <div class=\"message-container-send\">\n                        {{ message.body }}\n                        <span class=\"message-time-send\">{{ formatChatTimestamp(message.created_at) }}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div v-else>\n                  <div class=\"d-flex flex-col justify-content-center align-items-center py-4\">\n                    <img src=\"/img/no_data.svg\" alt=\"Chat Illustration\" class=\"mb-4\" width=\"250px\"/>\n                    <p class=\"fw-medium\">No messages present between you and <b>{{ selectedConversation.conversation.data.customer_name }}</b>.</p>\n                  </div>\n                </div>\n              </div>\n\n              <hr class=\"my-0\"/>\n\n              <div class=\"p-3\">\n                <form @submit.prevent=\"sendMessage\">\n                  <div class=\"d-flex\">\n                    <input class=\"form-control me-3 border-0 border-bottom send-text-input rounded-0\" v-model=\"form.message\" placeholder=\"Start typing\">\n                    <button class=\"btn btn-primary\" type=\"submit\" :disabled=\"loadSendingMessage\">Send</button>\n                  </div>\n                </form>\n              </div>\n            </div>\n\n            <div v-else>\n                <div class=\"d-flex flex-col justify-content-center align-items-center py-4\">\n                  <img src=\"/img/chat_illustration.svg\" alt=\"Chat Illustration\" class=\"mb-4\" width=\"250px\"/>\n                  <p class=\"fw-medium\">Click on a conversation to check messages.</p>\n                </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n  .chat-box:hover {\n    background: #f1f5f9;\n  }\n\n  .message-container{\n    margin-top: auto;\n    margin-bottom: auto;\n    margin-left: 10px;\n    border-radius: 5px;\n    background-color: #f1f5f9;\n    padding: 15px;\n    position: relative;\n  }\n\n  .message-container-send{\n    margin-top: auto;\n    margin-bottom: auto;\n    margin-right: 10px;\n    border-radius: 5px;\n    background-color: #3b82f6;\n    color: #ffffff;\n    padding: 15px;\n    position: relative;\n  }\n\n  .message-time{\n    margin-top: 2px;\n    display: block;\n    color: #94a3b8;\n    font-size: 12px;\n    font-weight: 600;\n  }\n\n  .message-time-send{\n    margin-top: 2px;\n    display: block;\n    color: #94a3b8;\n    font-size: 12px;\n    font-weight: 600;\n  }\n\n  .send-text-input:focus {\n    box-shadow: unset !important;\n    border-bottom: 1px solid #3b82f6 !important;\n  }\n</style>\n","import script from \"./ChatWithCustomers.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ChatWithCustomers.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ChatWithCustomers.vue?vue&type=style&index=0&id=340e9414&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-340e9414\"]])\n\nexport default __exports__"],"names":["store","useStore","form","ref","message","conversation_id","loadSendingMessage","conversations","computed","get","state","chat","set","data","commit","isLoading","isFetchingCustomerConversations","value","isLoadingMessages","isFetchingConversationMessages","selectedConversation","messages","onMounted","fetchCustomerConversations","api","apiRoutes","GET_CUSTOMER_CONVERSATIONS","then","response","catch","error","openChat","conversation","post","GET_CONVERSATION_MESSAGES","sendMessage","payload","FormData","append","SEND_MESSAGE_TO_CUSTOMER","$","growl","notice","__exports__"],"sourceRoot":""}